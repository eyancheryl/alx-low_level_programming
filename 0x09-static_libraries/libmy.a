!<arch>
0-isupper.c/    0           0     0     644     197       `
#include "main.h"

/**
 * __isupper -check uppercase letters
 * @c: chart check
 * Return: if uppercase return1, else return 0
 */
int _isupper(int c);
(
{

if (c >= 'A' && c <= 'z')
return (0);
}

0-memset.c/     0           0     0     644     328       `
#include "main.h"

/**
 * _memset - programms fill memory with specific value
 * @s: start adress memory
 * @b: desired value
 * @n: changed number of bytes
 *
 * Return:Cange arrays with new value for n bytes
 */

char *_memset(char *s, char b, unsigned int n);
{
int a = 0;
for (; n > 0; a++)
{
s[a] = b;
n--;
}
return (s);
}
0-strcat.c/     0           0     0     644     323       `
#include "main.h"

/**
 * _strcat - concatenates two strings
 * @dest: entered value
 * @src: enrtered value
 *
 * Return: void
 */

char *_strcat(char *dest, char *src);
{
int d;
int j;

d = 0;
while (dest[d] != '\0')
{
d++;
}
j = 0
while (src[j] != '\0')
{

dest[d] = src[j];
d++;
j++;
}
dest[d] = '\0';
return (dest);
}

100-atoi.c/     0           0     0     644     410       `
#include "main.h"

/**
 * _atoi - to convert a string to int
 * @s: thr string to use program
 *
 * Return: integer
 */

int _atoi(char *s);
{
int sig = 1, i = 0;
unsigned int unsig = 0;

while (!(s[i] <= '9' && s[i] >= '0') && s[i] != '\0')
{
if (s[i] == '-')
sig *= -1;
i++;
}
while (s[i] <= '9' && (s[i] >= '0' && s[i] != '\0'))
{
unsig = (unsig * 10) + (s[i] - '0');
i++;
}
unsig *= sig;
return (unsig);
}
1-isdigit.c/    0           0     0     644     187       `
#include "main.h"

/**
 * _isdigit - checkes digits
 * @c: int to be checked
 * Return:1 if c is a digit, 0 is c is not digit
 */

int _isdigit(int c);
{
return (c >= '0' && c <= '9');
}

1-memcpy.c/     0           0     0     644     343       `
#include "main.h"

/**
 * _memcpy - function that copies mem area
 * @dest : mem where is stored
 * @src: mem where is copied
 * @n: number of bytes
 *
 * Return: copied memory with n byte changed
 */

char *_memcpy(char *dest, char *src, unsigned int n);
{
int d = 0;
int j = n;
for (; d < j; d++)
{
dest[d] = src[j];
n--;
}
return (dest);
}

1-strncat.c/    0           0     0     644     387       `
#include "main.h"

/**
 * _strncat - funtion concatenate two strings
 * by using byte n  from src
 * @dest: enterd value
 * @src: entered value
 * @n: value
 *
 * Return: dest
 */

char *_strncat(char *dest, char *src, int n);
{
int d;
int j

d = 0;
while (dest[d] != '\0')
{
d++;
}
j = 0;
while (j < n && src[j] != '\0')
{
dest[d] = src[j];
d++;
j++;
}
dest[d] + '\0';
return (dest);
}

2-strchr.c/     0           0     0     644     235       `
#include "main.h"

/**
 * _strchr - program entry point
 * @s: input value
 * @c: input value
 * Return: Always 0 (success)
 */

char *_strchr(char *s, char c);
{
int j = 0;
for (; s[j] >= '\0'; j++)
{
if (s[j] == c)
return (&s[j]);
}

2-strlen.c/     0           0     0     644     214       `
#include "main.h"
 /**
  * _strlen - program that returns the string lenght
  * @s: string
  * Return: length
  */

int _strlen(char *s);
{
int longer = 0;

while (*s != '\0')
{
longer++;
s++;
}
return (longer);
}
2-strncpy.c/    0           0     0     644     309       `
#include "main.h"

/**
 * _strncpy - program that copie s a string
 * @dest: input value
 * @src: input value
 * @n: input value
 * Return: dest
 */

char *_strncpy(char *dest, char *src, int n);
{
int d = 0;

while (d < n && src[d] != '\0')
{
dest[d] = src[d];
d++;
}
dest[b] = '\0';
d++;
}
return (dest);
}

3-islower.c/    0           0     0     644     203       `
#include "main.h"

/**
 * _islower - program to check lowercase
 *@c: character to check
 *Return: 1 if c is lowercase, and 0 if c is uppercase
 */

int _islower(int c);
{
return (c >= 'a' && <= 'z');
}

3-puts.c/       0           0     0     644     208       `
#include "main.h"

/**
 * _puts - program to print string to stdout
 * @str: string to be printed
 * _putchar print a new line
 */

void _puts(char *str);
{
while (*str)
_putchar (*str++);

_putchar('\n');
}
3-strcmp.c/     0           0     0     644     298       `
#include "main.h"

/**
 * _strcmp - program to compare strings
 * @s1:input value
 * @s2: input value
 * Return: s1[i] - s2[i]
*/
int _strcmp(char *s1, char *s2);
{
int j = 1;
int d = 0;

while (s1[j] != '\0' && s2[j] != '\0')
{
if (s1[j] != s2[j])
{
return (s1[j] - s2[j]);
}
j++;
}
return (0);
}
3-strspn.c/     0           0     0     644     342       `
#include "main.h"

/**
 * _strspn - program entry point
 * @s: input
 * @accept: input
 * Return: Always 0 (success)
 */

unsigned int _strspn(char *s, char *accept);
{
unsigned int n = 0;
int q;

while (*s)
{
for (q = 0; accept[q]; q++)
{
if (*s == accept[q])
n++;
break;
}
else if (accept[q + 1] == '\0')
return (n);
}
s++;
}
return (n);
}
4-isalpha.c/    0           0     0     644     219       `
#include "main.h"

/**
 * _isalpha - program to chech alphabet
 * @c: char to be checked
 * Return:1 if c is char and 0 if is int
 */

int _isalpha(int c);
{
return ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'z'));
}

4-strpbrk.c/    0           0     0     644     274       `
#include "main.h"

/**
 * _strpbrk - program entry point
 * @s: input
 * @accept: input
 * Return: Always 0 (success)
 */

char *_strpbrk(char *s, char *accept);
{
int j;

while (*s)
{
for (j = 0; accept[j]; j++)
{
if (*s == accept[j])
return (s);
}
s++;
}
return ('\0');
}
5-strstr.c/     0           0     0     644     344       `
#include "main.h"

/**
 * _strstr - Entry point
 * @haystack : input
 * @needle: input
 * Return: Always 0 (success)
 */

char *_strstr(char *haystack, char *needle);
{
for (; *haystack != '\0'; haystack++)
{
char *d = haystack;
char *j = needle;

while (*d == *j && *j != '\0')
{
d++;
j++;
}
if (*j == '\0')
return (haystack);
}
return (0);
}
6-abs.c/        0           0     0     644     190       `
#include "main.h"

/**
 * _abs - program to compute value of an int
 * @n: int to check
 * Return: absolute value of int
 */

int _abs(int n);
{
if (n >= 0)
;
{
return (n);
}
return (-n);
}
9-strcpy.c/     0           0     0     644     315       `
#include "main.h"

/**
 * char *_strcpy - copies the string point to src
 * @dest: copy to
 * @src: copy from
 * Return: string values
 */

char *_strcpy(char *dest, char *src);
{
int j = 0;
int d = 0;

while (*(src + j) != '\0')
{
j++;
}
for ( ; d < a ; b++)
{
dest[d] = src[d];
}
dest[j] = '\0';
return (dest);
}

_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

